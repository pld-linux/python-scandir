Fix ctypes/readdir issues on Linux:
* dirent fields have different size when using X32 ABI (dirent=dirent64 in this case)
* readdir_r is deprecated and fails with long file names

--- scandir-1.5/scandir.py.orig	2017-03-23 16:05:00.658676902 +0100
+++ scandir-1.5/scandir.py	2017-03-23 20:49:34.708524775 +0100
@@ -403,14 +403,16 @@
         import ctypes.util
 
         DIR_p = ctypes.c_void_p
+        libc = ctypes.CDLL(ctypes.util.find_library('c'), use_errno=True)
+        have_readdir64 = hasattr(libc, 'readdir64')
 
         # Rather annoying how the dirent struct is slightly different on each
         # platform. The only fields we care about are d_name and d_type.
         class Dirent(ctypes.Structure):
             if sys.platform.startswith('linux'):
                 _fields_ = (
-                    ('d_ino', ctypes.c_ulong),
-                    ('d_off', ctypes.c_long),
+                    ('d_ino', ctypes.c_uint64 if have_readdir64 else ctypes.c_ulong),
+                    ('d_off', ctypes.c_int64 if have_readdir64 else ctypes.c_long),
                     ('d_reclen', ctypes.c_ushort),
                     ('d_type', ctypes.c_byte),
                     ('d_name', ctypes.c_char * 256),
@@ -432,14 +434,13 @@
         Dirent_p = ctypes.POINTER(Dirent)
         Dirent_pp = ctypes.POINTER(Dirent_p)
 
-        libc = ctypes.CDLL(ctypes.util.find_library('c'), use_errno=True)
         opendir = libc.opendir
         opendir.argtypes = [ctypes.c_char_p]
         opendir.restype = DIR_p
 
-        readdir_r = libc.readdir_r
-        readdir_r.argtypes = [DIR_p, Dirent_p, Dirent_pp]
-        readdir_r.restype = ctypes.c_int
+        readdir = libc.readdir64 if have_readdir64 else libc.readdir
+        readdir.argtypes = [DIR_p]
+        readdir.restype = Dirent_p
 
         closedir = libc.closedir
         closedir.argtypes = [DIR_p]
@@ -546,13 +547,14 @@
             if not dir_p:
                 raise posix_error(path)
             try:
-                result = Dirent_p()
                 while True:
-                    entry = Dirent()
-                    if readdir_r(dir_p, entry, result):
-                        raise posix_error(path)
+                    ctypes.set_errno(0)
+                    result = readdir(dir_p)
                     if not result:
+                        if ctypes.get_errno() != 0:
+                            raise posix_error(path)
                         break
+                    entry = result.contents
                     name = entry.d_name
                     if name not in (b'.', b'..'):
                         if not is_bytes:
